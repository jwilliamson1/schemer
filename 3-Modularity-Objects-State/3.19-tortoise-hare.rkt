#lang sicp
(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))

(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)

(define e (make-cycle (list 'a)))
(define z (make-cycle (list 'a 'b 'c)))
(define u (make-cycle (list 'a 'b 'c 'd 'e 'f)))
(define w (make-cycle (list 'a 'b 'c 'd 'e 'f 'g)))
(define t (make-cycle (list 'a 'b 'c 'd 'e 'f 'g 'h)))
(define v (make-cycle (list 'a 'b)))
(define x (make-cycle (list 'a)))
(define y (make-cycle (list '())))
(define a '())
(define b (list 'a))
(define c (list 'a 'b))
(define d (list 'a 'b 'c))

(define (contains-cycle? xs)
  (define (chase tort hare)
    (cond ((null? hare) #f)
          ((eq? tort hare) #t)
          ((null? (cdr hare)) #f)          
          (else (chase (cdr tort)
                       (cddr hare)))))
  (and (pair? xs)
      (chase xs (cdr xs))))

(contains-cycle? e)
(contains-cycle? z)
(contains-cycle? v)
(contains-cycle? x)
(contains-cycle? y)
(contains-cycle? u)
(contains-cycle? w)
(contains-cycle? t)
(contains-cycle? a)
(contains-cycle? b)
(contains-cycle? c)
(contains-cycle? d)
(display e)