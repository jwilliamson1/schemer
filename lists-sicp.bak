#lang racket
(define (list-ref items n)
  (if (= n 1)
      (car items)
      (list-ref (cdr items) 
                (- n 1))))

(define squares 
  (list 1 4 9 16 25))

(list-ref squares 1)
1

(define (length items)
  (define (length-iter a count)
    (if (null? a)
        count
        (length-iter (cdr a) 
                     (+ 1 count))))
  (length-iter items 0))

(define odds
  (list 1 3 5 7))

(length odds)
4

(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) 
            (append (cdr list1) 
                    list2))))

(append squares odds)
'(1 4 9 16 25 1 3 5 7)

(append odds squares)
'(1 3 5 7 1 4 9 16 25)

(define (last-pair list)
  (if (null?(cdr list))
      (car list)
      (last-pair(cdr list))))

(last-pair (list 23 72 149 34))
'(34)

(define (reverse list)
  (define len (length list))
  (define (reverse-rec list l)
    (if(= l 0)
       '()
       (cons (list-ref l)(reverse-rec list (- l 1)))))
  reverse-rec list len)

(reverse (list 1 4 9 16 25))
'(25 16 9 4 1)