or-gate delay 5
and-gate delay 3
inverter delay 2

agenda empty

sum and carry have probe functions

(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

half add input1 input2 sum carry
input1 gets or-action1, and-action1
 updates agenda	
   5 (set-signal! d 0) 
   3 (set-signal! c 0) 
	
input2 gets or-action2, and-action2
	5 (set-signal! d 0) 
   3 (set-signal! c 0) 
   
carry gets invert-input 
	2 (set-signal! e 1) 

local wire d gets and-gate-action
  3 (set-signal! s 0)
  
local wire e gets and-gate-action
  3 (set-signal! s 0)
  
agenda
5 (set-signal! d 0) nothing
3 (set-signal! c 0) -
5 (set-signal! d 0) -
3 (set-signal! c 0) -
2 (set-signal! e 1) creates new action
3 (set-signal! s 0) unaffected
3 (set-signal! s 0) -

if propagate were called now nothing would happen until 2 (set-signal! e 1)
this would trigger e's 2nd and-gate action and create a new action 3 (set-signal! s 0)
and put it at the end of the queue

agenda time order
2 (set-signal! e 1) creates new action at 2 + 3
3 (set-signal! c 0) -
3 (set-signal! c 0) -
3 (set-signal! s 0) unaffected
3 (set-signal! s 0) -
5 (set-signal! d 0) nothing
5 (set-signal! d 0) -

if propagate were called now, it calls first action and set current time to 2
e's and-action gets called and creates a new action (set-signal! s 0) at 5 in the agenda

2 (set-signal! e 1) creates new action
3 (set-signal! c 0) -
3 (set-signal! c 0) -
3 (set-signal! s 0) unaffected
3 (set-signal! s 0) -
5 (set-signal! d 0) nothing
5 (set-signal! d 0) -
5 (set-signal! s 0) - nothing

***hypothetical
	agenda (removed executed actions)
	action 3 (set-signal! s 0) nothing

	probe would have not been called
***

NEXT set-signal! a 1

assume propagate was not called. This is the only action that cleans up the agenda

new or-action added: time: 5 set-signal! d 1
new and-action added: time: 3 set-signal! d 0

insert into existing agenda
2 (set-signal! e 1) creates new action
3 (set-signal! c 0) -
3 (set-signal! c 0) -
3 (set-signal! s 0) unaffected
3 (set-signal! s 0) -
3 (SET-SIGNAL! d 0) -
5 (set-signal! d 0) nothing
5 (set-signal! d 0) -
5 (set-signal! s 0) - nothing
5 (SET-SIGNAL! d 1) 

propagate called

first action at 2 triggers last and-gate to add new action on s at 5 (current time + 3)
set d 1 at 5 causes a new and gate action to be added at 8 current time + 3
and setter created by inverter does nothing since sum hasn't changed yet
wire states: a:1, b:0, c:0, d:0, e:0, sum:0
//2 (set-signal! e 1) creates (set-signal! s 0) @ 5 (e:1)
3 (SET-SIGNAL! c 0) -
3 (set-signal! c 0) -
3 (set-signal! s 0) unaffected
3 (set-signal! s 0) -
3 (SET-SIGNAL! d 0) -
5 (set-signal! d 0) nothing
5 (set-signal! d 0) -
5 (set-signal! s 0) - nothing
//5 (SET-SIGNAL! d 1) creates new and action (SET-SIGNAL! s 1) at 8
//5 (SET-SIGNAL! s 0) -nothing
8 (SET-SIGNAL! s 1) -end (sum: 1)

whole agenda should be wiped
current state
a:1, b:0, c:0, d:1, e:1, sum:1

NEXT set-signal b 1
new action or-act added: time: 13 set-signal! d 1 
new action and-act added time: 11 set-signal! c 1

propagate called
13 set-signal! d 1 - nothing 
11 set-signal! c 1 -adds invert action
13 set-signal! e 0 - adds and gate action
16 set-signal! s 1 END
	