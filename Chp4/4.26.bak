#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 157 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 192 192 192 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 192 192 192 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 249 148 40 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 249 148 40 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 128 0 255 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 128 0 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 0 1
#"\0"
0 75 9 #"Consolas\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
0 0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 50 205 50 0
0 0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 128 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 128
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 255 255 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 106 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 185 220 113
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 155 255 155
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 116 116
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 18 67 155 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 30 70 190 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 135 185 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 208 208
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 116 116 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 125 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 143 15 223 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 141 19 5 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 244 194 71 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 127
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 86 86 86 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
30 3 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 0 31
31 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 31 31 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 157 157 250
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 191 255 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 191 255 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 152 251 152
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 191 255 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 191 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 5887 0 30 3 10 #"#lang sicp"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 26 3 1 #" "
0 0 14 3 24 #"web-server/private/timer"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 26 3 1 #" "
0 0 14 3 13 #"racket/format"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 2 #"xs"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 2 #"xs"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 8 #"()      "
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 2 #"xs"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 2 #"xs"
0 0 26 3 2 #")("
0 0 14 3 6 #"filter"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 2 #"xs"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 6 #"filter"
0 0 26 3 1 #" "
0 0 14 3 1 #"f"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 2 #"xs"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"displayln"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 26 3 2 #" ("
0 0 14 3 4 #"only"
0 0 26 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 26 3 1 #" "
0 0 14 3 9 #"make-hash"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 26 3 2 #" ("
0 0 14 3 4 #"only"
0 0 26 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 26 3 1 #" "
0 0 14 3 9 #"hash-set!"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 26 3 2 #" ("
0 0 14 3 4 #"only"
0 0 26 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 26 3 1 #" "
0 0 14 3 8 #"hash-ref"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"*the-table*"
0 0 26 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 26 3 2 #"))"
0 0 18 3 15 #";make THE table"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 3 #"put"
0 0 26 3 1 #" "
0 0 14 3 3 #"key"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 3 #") ("
0 0 14 3 9 #"hash-set!"
0 0 26 3 1 #" "
0 0 14 3 11 #"*the-table*"
0 0 26 3 1 #" "
0 0 14 3 3 #"key"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 3 #"get"
0 0 26 3 1 #" "
0 0 14 3 3 #"key"
0 0 26 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 26 3 1 #" "
0 0 14 3 11 #"*the-table*"
0 0 26 3 1 #" "
0 0 14 3 3 #"key"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 18 3 28 #";(put 'test-key 'test-value)"
0 0 26 29 1 #"\n"
0 0 18 3 16 #";(get 'test-key)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 5 #"false"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 5 #"false"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 4 #") (("
0 0 14 3 7 #"analyze"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"analyze"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 16 #"self-evaluating?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 23 #"analyze-self-evaluating"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 7 #"quoted?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 14 #"analyze-quoted"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 9 #"variable?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 16 #"analyze-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 11 #"assignment?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 18 #"analyze-assignment"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 16 3 11 #"definition?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 18 #"analyze-definition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 3 #"if?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 10 #"analyze-if"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 7 #"lambda?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 14 #"analyze-lambda"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 16 3 6 #"begin?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 16 #"analyze-sequence"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 16 3 13 #"begin-actions"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 5 #"cond?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 7 #"analyze"
0 0 26 3 2 #" ("
0 0 14 3 8 #"cond->if"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 4 #"let?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 7 #"analyze"
0 0 26 3 2 #" ("
0 0 14 3 16 #"let->combination"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 12 #"application?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 19 #"analyze-application"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 20 #"\"Unknown expression "
0 0 20 29 1 #"\n"
0 0 20 3 31 #"                 type: ANALYZE\""
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 16 #"                "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 23 #"analyze-self-evaluating"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 2 #") "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"analyze-quoted"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 4 #"qval"
0 0 26 3 2 #" ("
0 0 14 3 17 #"text-of-quotation"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 2 #") "
0 0 14 3 4 #"qval"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"analyze-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 21 #"lookup-variable-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 18 #"analyze-assignment"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 19 #"assignment-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"vproc"
0 0 26 3 2 #" ("
0 0 14 3 7 #"analyze"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 16 #"assignment-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 19 #"set-variable-value!"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 5 #"vproc"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 23 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 18 #"analyze-definition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 16 3 19 #"definition-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"vproc"
0 0 26 3 2 #" ("
0 0 14 3 7 #"analyze"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 16 3 16 #"definition-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 16 #"define-variable!"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 5 #"vproc"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 23 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"analyze-if"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"pproc"
0 0 26 3 2 #" ("
0 0 14 3 7 #"analyze"
0 0 26 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"cproc"
0 0 26 3 2 #" ("
0 0 14 3 7 #"analyze"
0 0 26 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"aproc"
0 0 26 3 2 #" ("
0 0 14 3 7 #"analyze"
0 0 26 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pproc"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 5 #"cproc"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 5 #"aproc"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"analyze-lambda"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 4 #"vars"
0 0 26 3 2 #" ("
0 0 14 3 17 #"lambda-parameters"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"bproc"
0 0 26 3 2 #" ("
0 0 14 3 16 #"analyze-sequence"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 11 #"lambda-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 14 #"make-procedure"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 5 #"bproc"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"analyze-sequence"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"sequentially"
0 0 26 3 1 #" "
0 0 14 3 5 #"proc1"
0 0 26 3 1 #" "
0 0 14 3 5 #"proc2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 5 #"proc1"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 5 #"proc2"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 26 3 1 #" "
0 0 14 3 10 #"first-proc"
0 0 26 3 1 #" "
0 0 14 3 10 #"rest-procs"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 10 #"rest-procs"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 10 #"first-proc"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"loop"
0 0 26 3 2 #" ("
0 0 14 3 12 #"sequentially"
0 0 26 3 1 #" "
0 0 14 3 10 #"first-proc"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 10 #"rest-procs"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 10 #"rest-procs"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"procs"
0 0 26 3 2 #" ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 7 #"analyze"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 5 #"procs"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 25 #"\"Empty sequence: ANALYZE\""
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"loop"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"procs"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"procs"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"analyze-application"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"fproc"
0 0 26 3 2 #" ("
0 0 14 3 7 #"analyze"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 6 #"aprocs"
0 0 26 3 2 #" ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 7 #"analyze"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operands"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 19 #"execute-application"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"fproc"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"aproc"
0 0 26 3 3 #") ("
0 0 14 3 5 #"aproc"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"            "
0 0 14 3 6 #"aprocs"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"execute-application"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #" "
0 0 14 3 4 #"args"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 20 #"primitive-procedure?"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 25 #"apply-primitive-procedure"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #" "
0 0 14 3 4 #"args"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 19 #"compound-procedure?"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"         (("
0 0 14 3 14 #"procedure-body"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 18 #"extend-environment"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 20 #"procedure-parameters"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"           "
0 0 14 3 4 #"args"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 21 #"procedure-environment"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 25 #"\"Unknown procedure type: "
0 0 20 29 1 #"\n"
0 0 20 3 42 #"                      EXECUTE-APPLICATION\""
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                     "
0 0 14 3 4 #"proc"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"list-of-values"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 23 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 3 #"snd"
0 0 26 3 2 #" ("
0 0 14 3 14 #"list-of-values"
0 0 26 3 2 #" ("
0 0 14 3 13 #"rest-operands"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 3 #"fst"
0 0 26 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 13 #"first-operand"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"fst"
0 0 26 3 1 #" "
0 0 14 3 3 #"snd"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"eval-if"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"eval-cond"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 17 #"eval-cond-clauses"
0 0 26 3 2 #" ("
0 0 14 3 12 #"cond-clauses"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 17 #"eval-cond-clauses"
0 0 26 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 3 5 #"     "
0 0 18 3 16 #"; no else clause"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"first"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 4 #"rest"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 17 #"cond-else-clause?"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"rest"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 13 #"sequence->exp"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ("
0 0 14 3 12 #"cond-actions"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 4 #"ELSE"
0 0 20 3 1 #" "
0 0 20 3 6 #"clause"
0 0 20 3 1 #" "
0 0 20 3 3 #"isn"
0 0 20 3 1 #"'"
0 0 20 3 1 #"t"
0 0 20 3 1 #" "
0 0 20 29 1 #"\n"
0 0 20 3 41 #"                        last: EVAL->COND\""
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                       "
0 0 14 3 7 #"clauses"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"=>?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 8 #"test-val"
0 0 26 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"true?"
0 0 26 3 1 #" "
0 0 14 3 8 #"test-val"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 28 #"                           ("
0 0 14 3 19 #"execute-application"
0 0 26 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 14 #"cond-recipient"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 8 #"test-val"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 28 #"                           ("
0 0 14 3 17 #"eval-cond-clauses"
0 0 26 3 1 #" "
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 7 #"make-if"
0 0 26 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 34 #"                                 ("
0 0 14 3 13 #"sequence->exp"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 35 #"                                  ("
0 0 14 3 12 #"cond-actions"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 34 #"                                 ("
0 0 14 3 17 #"eval-cond-clauses"
0 0 26 3 1 #" "
0 0 14 3 4 #"rest"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")) "
0 0 14 3 3 #"env"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"eval-sequence"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 9 #"last-exp?"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 13 #"eval-sequence"
0 0 26 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                        "
0 0 14 3 3 #"env"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-assignment"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 19 #"set-variable-value!"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 19 #"assignment-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 14 3 16 #"assignment-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 23 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-definition"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 16 #"define-variable!"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 19 #"definition-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"eval"
0 0 26 3 2 #" ("
0 0 16 3 16 #"definition-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 23 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"self-evaluating?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 4 #"true"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 7 #"string?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 4 #"true"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 5 #"false"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"quoted?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"quote"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 17 #"text-of-quotation"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"tag"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"tag"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 14 3 5 #"false"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"assignment?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"unassignment?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 6 #"unset!"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"assignment-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"assignment-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 11 #"definition?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 6 #"define"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 19 #"definition-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 5 #"caadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 16 #"definition-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"cdadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #")   "
0 0 18 3 19 #"; formal parameters"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 5 #")))) "
0 0 18 3 6 #"; body"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"lambda?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 6 #"lambda"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 17 #"lambda-parameters"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"lambda-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 3 #"if?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"if"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"if-predicate"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"if-consequent"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"if-alternative"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"make-if"
0 0 26 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                 "
0 0 14 3 10 #"consequent"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                 "
0 0 14 3 11 #"alternative"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"if"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 9 #"predicate"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 10 #"consequent"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 11 #"alternative"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"not?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"not"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"not->if"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"make-if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"           "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"           "
0 0 23 3 1 #"'"
0 0 14 3 4 #"true"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"and?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"and"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"and->if"
0 0 26 3 1 #" "
0 0 14 3 5 #"preds"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"preds"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 23 3 1 #"'"
0 0 14 3 4 #"true"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 7 #"make-if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"preds"
0 0 26 3 3 #") ("
0 0 14 3 7 #"and->if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"preds"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"               "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 25 #";(and->if '(and (= 3 1)))"
0 0 26 29 1 #"\n"
0 0 18 3 32 #";(and->if '(and (= 2 2)(= 3 3)))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 3 #"or?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"or"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"or->if"
0 0 26 3 1 #" "
0 0 14 3 5 #"preds"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"preds"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 7 #"make-if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"preds"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 4 #"true"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 6 #"or->if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"preds"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";(or->if '(or false))"
0 0 26 29 1 #"\n"
0 0 18 3 25 #";(or->if '(or true true))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 6 #"begin?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"begin"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 13 #"begin-actions"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"last-exp?"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"first-exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"sequence->exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 2 #") "
0 0 14 3 3 #"seq"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        (("
0 0 14 3 9 #"last-exp?"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 3 #") ("
0 0 14 3 9 #"first-exp"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 10 #"make-begin"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"make-begin"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"begin"
0 0 26 3 1 #" "
0 0 14 3 3 #"seq"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"application?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operands"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"no-operands?"
0 0 26 3 1 #" "
0 0 14 3 3 #"ops"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"ops"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"first-operand"
0 0 26 3 1 #" "
0 0 14 3 3 #"ops"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"ops"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"rest-operands"
0 0 26 3 1 #" "
0 0 14 3 3 #"ops"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"ops"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"cond?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 4 #"cond"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 3 #"=>?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"=>"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"cond-clauses"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 17 #"cond-else-clause?"
0 0 26 3 1 #" "
0 0 14 3 6 #"clause"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 26 3 1 #" "
0 0 14 3 6 #"clause"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 4 #"else"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 26 3 1 #" "
0 0 14 3 6 #"clause"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 6 #"clause"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"cond-actions"
0 0 26 3 1 #" "
0 0 14 3 6 #"clause"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 6 #"clause"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"cond-recipient"
0 0 26 3 1 #" "
0 0 14 3 6 #"clause"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 6 #"clause"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"cond->if"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 14 #"expand-clauses"
0 0 26 3 2 #" ("
0 0 14 3 12 #"cond-clauses"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"expand-clauses"
0 0 26 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 3 5 #"     "
0 0 18 3 16 #"; no else clause"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"first"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 4 #"rest"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 17 #"cond-else-clause?"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"rest"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 13 #"sequence->exp"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ("
0 0 14 3 12 #"cond-actions"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 19 #"\"ELSE clause isn't "
0 0 20 29 1 #"\n"
0 0 20 3 39 #"                        last: COND->IF\""
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                       "
0 0 14 3 7 #"clauses"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"=>?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ("
0 0 14 3 7 #"make-if"
0 0 26 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 14 #"cond-recipient"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 3 #") ("
0 0 14 3 14 #"cond-predicate"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 27 #"                          ("
0 0 14 3 14 #"expand-clauses"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                      "
0 0 14 3 4 #"rest"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ("
0 0 14 3 7 #"make-if"
0 0 26 3 2 #" ("
0 0 14 3 14 #"cond-predicate"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 14 3 13 #"sequence->exp"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ("
0 0 14 3 12 #"cond-actions"
0 0 26 3 1 #" "
0 0 14 3 5 #"first"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 14 3 14 #"expand-clauses"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                      "
0 0 14 3 4 #"rest"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 9         373 23           0 0           0 61 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"conda"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 5 #"assoc"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"a"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"(("
0 0 14 3 1 #"a"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #")("
0 0 14 3 1 #"b"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 4 #"))) "
0 0 14 3 2 #"=>"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"woop\""
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"condb"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"Three"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"Wrong"
0 0 26 3 3 #")))"
0           0 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"let?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 3 #"let"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"let-assignments"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"let-expressions"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 2 #" ("
0 0 14 3 15 #"let-assignments"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"let-variables"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 15 #"let-assignments"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"let-body"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"named-let?"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"symbol?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"let-name"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"make-definition"
0 0 26 3 1 #" "
0 0 14 3 5 #"label"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 2 #")("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"label"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"let->combination"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 22 #"named-let->combination"
0 0 26 3 1 #" "
0 0 14 3 5 #"label"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 3 #"() "
0 0 18 3 11 #"; no params"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"make-definition"
0 0 26 3 1 #" "
0 0 14 3 5 #"label"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 42 #"                                         ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 2 #") "
0 0 14 3 4 #"exps"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"let*"
0 0 26 3 3 #" (("
0 0 14 3 5 #"label"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 9 #"let-block"
0 0 26 3 2 #" ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 10 #"named-let?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #")("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"vars"
0 0 26 3 2 #" ("
0 0 14 3 13 #"let-variables"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"exps"
0 0 26 3 2 #" ("
0 0 14 3 15 #"let-expressions"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"body"
0 0 26 3 2 #" ("
0 0 14 3 8 #"let-body"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 2 #") "
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 27 #"\"No variables in let block\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 2 #") "
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 29 #"\"No expressions in let block\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 2 #") "
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 22 #"\"No body in let block\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          (("
0 0 14 3 10 #"named-let?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 22 #"named-let->combination"
0 0 26 3 1 #" "
0 0 14 3 5 #"label"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"exps"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 20 #"                    "
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 2 #") "
0 0 14 3 4 #"exps"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 9         967 23           0 0           0 160 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"let1"
0 0 26 3 2 #" ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 4 #")))("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"let2"
0 0 26 3 2 #" ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"let3"
0 0 26 3 2 #" ("
0 0 16 3 4 #"let*"
0 0 26 3 3 #" (("
0 0 14 3 1 #"w"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";named let example"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 2 #"lp"
0 0 26 3 3 #" (("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 4 #"1000"
0 0 26 3 3 #"))("
0 0 14 3 2 #"if"
0 0 26 3 3 #" (("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"y"
0 0 26 3 3 #") ("
0 0 14 3 2 #">="
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #"))"
0 0 14 3 1 #"x"
0 0 26 3 2 #")("
0 0 14 3 2 #"lp"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0           0 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"make-named-let"
0 0 26 3 1 #" "
0 0 14 3 4 #"name"
0 0 26 3 1 #" "
0 0 14 3 16 #"initial-bindings"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 3 #"let"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 4 #"name"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 16 #"initial-bindings"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 4 #"body"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 14 #"make-named-let"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"lp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"(("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 4 #"1000"
0 0 26 3 2 #"))"
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 14 3 2 #"if"
0 0 26 3 3 #" (("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"y"
0 0 26 3 3 #") ("
0 0 14 3 2 #">="
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #"))"
0 0 14 3 1 #"x"
0 0 26 3 2 #")("
0 0 14 3 2 #"lp"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"do1"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 16 3 2 #"do"
0 0 26 3 3 #" (("
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"     (("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"do2"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 16 3 2 #"do"
0 0 26 3 3 #" (("
0 0 14 3 9 #"remaining"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 9 #"final-sum"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 9 #"final-sum"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"     (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 26 3 2 #") "
0 0 14 3 9 #"final-sum"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 7 #"newline"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"do3"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 16 3 2 #"do"
0 0 26 3 3 #" (("
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    (("
0 0 14 3 1 #">"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"do4"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 16 3 2 #"do"
0 0 26 3 3 #" (("
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 1 #"p"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 2 #" ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    (("
0 0 14 3 1 #">"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"     "
0 0 14 3 1 #"p"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 6 #"format"
0 0 26 3 1 #" "
0 0 20 3 6 #"\" 3**\""
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #" "
0 0 20 3 4 #"is \""
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 1 #" "
0 0 20 3 4 #"\"\\n\""
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 18 3 30 #";this actually is a while loop"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"do->app"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"check-done"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 20 3 6 #"\"done\""
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"make-sets!"
0 0 26 3 1 #" "
0 0 14 3 13 #"init-bindings"
0 0 26 3 1 #" "
0 0 14 3 5 #"steps"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"begin"
0 0 26 3 3 #") ("
0 0 14 3 3 #"map"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"b"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 2 #")("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 1 #"b"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 3 #")) "
0 0 14 3 13 #"init-bindings"
0 0 26 3 1 #" "
0 0 14 3 5 #"steps"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 15 #"bindings-bodies"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"test"
0 0 26 3 2 #" ("
0 0 14 3 6 #"caaddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"done"
0 0 26 3 2 #" ("
0 0 14 3 6 #"cdaddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 8 #"org-body"
0 0 26 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"let*"
0 0 26 3 3 #" (("
0 0 14 3 13 #"init-bindings"
0 0 26 3 2 #" ("
0 0 14 3 3 #"map"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"e"
0 0 26 3 2 #")("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 1 #"e"
0 0 26 3 2 #")("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 1 #"e"
0 0 26 3 4 #"))) "
0 0 14 3 15 #"bindings-bodies"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"steps"
0 0 26 3 2 #" ("
0 0 14 3 3 #"map"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"e"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 1 #"e"
0 0 26 3 3 #")) "
0 0 14 3 15 #"bindings-bodies"
0 0 26 3 3 #")) "
0 0 26 3 10 #"          "
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 4 #"body"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"begin"
0 0 26 3 15 #"               "
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 7 #"make-if"
0 0 26 3 1 #" "
0 0 14 3 4 #"test"
0 0 26 29 1 #"\n"
0 0 26 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"begin"
0 0 26 29 1 #"\n"
0 0 26 3 39 #"                                      ("
0 0 14 3 10 #"make-sets!"
0 0 26 3 1 #" "
0 0 14 3 13 #"init-bindings"
0 0 26 3 1 #" "
0 0 14 3 5 #"steps"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 39 #"                                      ("
0 0 14 3 10 #"check-done"
0 0 26 3 1 #" "
0 0 14 3 4 #"done"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"begin"
0 0 26 29 1 #"\n"
0 0 26 3 38 #"                                      "
0 0 14 3 8 #"org-body"
0 0 26 29 1 #"\n"
0 0 26 3 39 #"                                      ("
0 0 14 3 10 #"make-sets!"
0 0 26 3 1 #" "
0 0 14 3 13 #"init-bindings"
0 0 26 3 1 #" "
0 0 14 3 5 #"steps"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 39 #"                                      ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 2 #"do"
0 0 26 3 3 #") ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 13 #"init-bindings"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 26 #"                       )))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 14 #"make-named-let"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"while"
0 0 26 3 1 #" "
0 0 14 3 13 #"init-bindings"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"do->app"
0 0 26 3 1 #" "
0 0 14 3 3 #"do1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"do->app"
0 0 26 3 1 #" "
0 0 14 3 3 #"do2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"do->app"
0 0 26 3 1 #" "
0 0 14 3 3 #"do3"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"do->app"
0 0 26 3 1 #" "
0 0 14 3 3 #"do4"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"last-var?"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"let*?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 4 #"let*"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"let*->nested"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 8 #"var-defs"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"body"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-block"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 11 #"expand-let*"
0 0 26 3 1 #" "
0 0 14 3 8 #"var-defs"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"expand-let*"
0 0 26 3 1 #" "
0 0 14 3 8 #"var-defs"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 8 #"var-defs"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 8 #"make-let"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 8 #"var-defs"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 13 #"sequence->exp"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 8 #"make-let"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 8 #"var-defs"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 11 #"expand-let*"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 8 #"var-defs"
0 0 26 3 2 #") "
0 0 14 3 4 #"body"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"for?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 3 #"for"
0 0 26 3 2 #")("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 3 #"do?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 2 #"do"
0 0 26 3 2 #")("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"while?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"while"
0 0 26 3 2 #")("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 6 #"until?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"until"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"make-assignment"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 6 #"()))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"for->lambda"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 7 #"binding"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"check"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 3 #"inc"
0 0 26 3 2 #" ("
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"body"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 6 #"cddddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 8 #"make-let"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 15 #"make-definition"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                     "
0 0 23 3 1 #"'"
0 0 16 3 3 #"for"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 35 #"                                  ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 7 #"make-if"
0 0 26 3 1 #" "
0 0 14 3 5 #"check"
0 0 26 3 41 #"                                         "
0 0 26 29 1 #"\n"
0 0 26 3 50 #"                                                 ("
0 0 14 3 10 #"make-begin"
0 0 26 29 1 #"\n"
0 0 26 3 51 #"                                                  ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 29 1 #"\n"
0 0 26 3 57 #"                                                        ("
0 0 14 3 15 #"make-assignment"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 2 #") "
0 0 14 3 3 #"inc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 57 #"                                                        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 3 #"for"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 49 #"                                                 "
0 0 20 3 6 #"\"done\""
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 3 #"for"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"do->lambda"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"check"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"body"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 10 #"make-begin"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 15 #"make-definition"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 2 #"do"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 42 #"                                         ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 10 #"make-begin"
0 0 26 29 1 #"\n"
0 0 26 3 49 #"                                                ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 29 1 #"\n"
0 0 26 3 55 #"                                                      ("
0 0 14 3 7 #"make-if"
0 0 26 3 1 #" "
0 0 14 3 5 #"check"
0 0 26 29 1 #"\n"
0 0 26 3 64
#"                                                               ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 2 #"do"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 63
#"                                                               "
0 0 20 3 6 #"\"done\""
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 2 #"do"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";(do->lambda '(do (< x 20)(begin (display x)(set! x (+ x 2)))))"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";(do->lambda '(do (< x 10)(begin (display x)(set! x (+ x 2)))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"while->lambda"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"check"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"body"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 10 #"make-begin"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 15 #"make-definition"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"while"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 42 #"                                         ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 7 #"make-if"
0 0 26 3 1 #" "
0 0 14 3 5 #"check"
0 0 26 29 1 #"\n"
0 0 26 3 57 #"                                                        ("
0 0 14 3 10 #"make-begin"
0 0 26 29 1 #"\n"
0 0 26 3 58
#"                                                         ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 29 1 #"\n"
0 0 26 3 64
#"                                                               ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"while"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 56 #"                                                        "
0 0 20 3 6 #"\"done\""
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"while"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 13 #"while->lambda"
0 0 18 3 54 #" '(while (< x 20)(begin (display x)(set! x (+ x 2)))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 73
(5
 #";'(begin (define x 0)(while (< x 20)(begin (display x)(set! x (+ x 2)"
 #"))))"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"until->while"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"check"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"body"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 13 #"while->lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"while"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"not"
0 0 26 3 1 #" "
0 0 14 3 5 #"check"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 14 3 4 #"body"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 12 #"until->while"
0 0 18 3 54 #" '(until (< x 20)(begin (display x)(set! x (- x 2)))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 74
(6
 #";'(begin (define x 50)(until (< x 20)(begin (display x)(set! x (- x 2"
 #")))))"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-let"
0 0 26 3 1 #" "
0 0 14 3 8 #"var-defs"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 3 #"let"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 8 #"var-defs"
0 0 26 3 2 #") "
0 0 14 3 4 #"body"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 9         259 23           0 0           0 42 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"make-let"
0 0 26 3 1 #" "
0 0 14 3 12 #"list-of-vars"
0 0 26 3 1 #" "
0 0 14 3 19 #"list-of-expressions"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 9 #"list-wrap"
0 0 26 3 2 #" ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 19 #"list-of-expressions"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 3 #"let"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 12 #"list-of-vars"
0 0 26 3 1 #" "
0 0 14 3 9 #"list-wrap"
0 0 26 3 2 #") "
0 0 14 3 4 #"body"
0 0 26 3 4 #"))))"
0           0 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 61
#";(define ltest (make-let '(x y )'((+ 3 4) (- 3 2)) '(* x y)))"
0 0 26 29 1 #"\n"
0 0 18 3 25 #";(let->combination ltest)"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";(let*->nested ltest)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 53 #";(for->lambda '(for (x 0)(< x 10)(+ x 1)(display x)))"
0 0 26 29 1 #"\n"
0 0 18 3 53 #";(for->lambda '(for (x 10)(> x 0)(- x 1)(display x)))"
0 0 26 29 1 #"\n"
0 9           7 23           0 0           0 0           0 0 0 26 29 1
#"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"make-procedure"
0 0 26 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")  "
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 18 3 39 #";(displayln (list \"normal body \" body))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 49 #";(displayln (list \"maye scanned \" maybe-scanned))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 26 3 1 #" "
0 0 14 3 10 #"parameters"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"compound-procedure?"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 20 #"procedure-parameters"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"procedure-body"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 21 #"procedure-environment"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 3 #") ("
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #" "
0 0 14 3 1 #"p"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 21 #"enclosing-environment"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 26 3 1 #" "
0 0 14 3 9 #"variables"
0 0 26 3 1 #" "
0 0 14 3 6 #"values"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 9 #"variables"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 3 #"() "
0 0 23 3 1 #"'"
0 0 26 3 4 #"()))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 9 #"variables"
0 0 26 3 1 #" "
0 0 14 3 6 #"values"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 21 #"add-binding-to-frame!"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 8 #"set-cdr!"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 8 #"set-car!"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 18 #"extend-environment"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #" "
0 0 14 3 8 #"base-env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 3 #") ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 10 #"make-frame"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 2 #") "
0 0 14 3 8 #"base-env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"<"
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 4 #"vars"
0 0 26 3 3 #") ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 29 #"\"Too many arguments supplied\""
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                 "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                 "
0 0 14 3 4 #"vals"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 28 #"\"Too few arguments supplied\""
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                 "
0 0 14 3 4 #"vars"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                 "
0 0 14 3 4 #"vals"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"e1"
0 0 26 3 2 #" ("
0 0 14 3 18 #"extend-environment"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 14 3 1 #"a"
0 0 26 3 1 #" "
0 0 14 3 1 #"b"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 23 3 1 #"5"
0 0 26 3 1 #" "
0 0 23 3 1 #"6"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 4 #"()))"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";e1"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"unassigned"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 12 #"*unassigned*"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 21 #"lookup-variable-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"env-loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 8 #"env-loop"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 21 #"enclosing-environment"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 16 3 3 #"let"
0 0 26 3 4 #" (( "
0 0 14 3 3 #"val"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cdar"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 10 #"unassigned"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 20 #"                   ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 45 #"\"Cannot use variable before it is assigned: \""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                   "
0 0 14 3 3 #"val"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 18 #"\"Unbound variable\""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 26 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 4 #"scan"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 8 #"env-loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"set-variable-value!"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"env-loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 8 #"env-loop"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 21 #"enclosing-environment"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 8 #"set-cdr!"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 2 #") "
0 0 14 3 3 #"val"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #" "
0 0 14 3 21 #"the-empty-environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 24 #"\"Unbound variablE: SET!\""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 26 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 4 #"scan"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 8 #"env-loop"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 16 3 16 #"define-variable!"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"frame"
0 0 26 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 21 #"add-binding-to-frame!"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"            (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 8 #"set-cdr!"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 2 #") "
0 0 14 3 3 #"val"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"scan"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 8 #"bindings"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"scan"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 30 #";(define-variable! 'c 'oof e1)"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";e1"
0 0 26 29 1 #"\n"
0 0 18 3 99
(7
 #";scan responsibilties keep state of frame iterate until null or match"
 #" and do something in each case"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 17 #"setup-environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 11 #"initial-env"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 18 #"extend-environment"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 25 #"primitive-procedure-names"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 27 #"primitive-procedure-objects"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 14 3 21 #"the-empty-environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 16 #"define-variable!"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"true"
0 0 26 3 1 #" "
0 0 14 3 4 #"true"
0 0 26 3 1 #" "
0 0 14 3 11 #"initial-env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 16 #"define-variable!"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 3 1 #" "
0 0 14 3 5 #"false"
0 0 26 3 1 #" "
0 0 14 3 11 #"initial-env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 14 3 11 #"initial-env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 20 #"primitive-procedure?"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 9 #"primitive"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 24 #"primitive-implementation"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 20 #"primitive-procedures"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 4 #"cons"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 5 #"null?"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"assoc"
0 0 26 3 1 #" "
0 0 14 3 5 #"assoc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"+"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"-"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"*"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"/"
0 0 26 3 1 #" "
0 0 14 3 1 #"/"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"="
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 1 #"<"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 2 #"<="
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #">"
0 0 26 3 1 #" "
0 0 14 3 1 #">"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #">="
0 0 26 3 1 #" "
0 0 14 3 2 #">="
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"newline"
0 0 26 3 1 #" "
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 7 #"display"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"runtime"
0 0 26 3 1 #" "
0 0 14 3 7 #"runtime"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 6 #"format"
0 0 26 3 1 #" "
0 0 14 3 2 #"~a"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 25 #"primitive-procedure-names"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 20 #"primitive-procedures"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 27 #"primitive-procedure-objects"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 9 #"primitive"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 14 3 20 #"primitive-procedures"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 26 #"apply-in-underlying-scheme"
0 0 26 3 1 #" "
0 0 14 3 5 #"apply"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 25 #"apply-primitive-procedure"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 1 #" "
0 0 14 3 4 #"args"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 26 #"apply-in-underlying-scheme"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 24 #"primitive-implementation"
0 0 26 3 1 #" "
0 0 14 3 4 #"proc"
0 0 26 3 2 #") "
0 0 14 3 4 #"args"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"input-prompt"
0 0 26 3 2 #"  "
0 0 20 3 19 #"\";;; M-Eval input:\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"output-prompt"
0 0 26 3 1 #" "
0 0 20 3 19 #"\";;; M-Eval value:\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"driver-loop"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 16 #"prompt-for-input"
0 0 26 3 1 #" "
0 0 14 3 12 #"input-prompt"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"input"
0 0 26 3 2 #" ("
0 0 14 3 4 #"read"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 6 #"output"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 4 #"eval"
0 0 26 3 1 #" "
0 0 14 3 5 #"input"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                 "
0 0 14 3 22 #"the-global-environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 15 #"announce-output"
0 0 26 3 1 #" "
0 0 14 3 13 #"output-prompt"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 10 #"user-print"
0 0 26 3 1 #" "
0 0 14 3 6 #"output"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 11 #"driver-loop"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"prompt-for-input"
0 0 26 3 1 #" "
0 0 14 3 6 #"string"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 26 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 6 #"string"
0 0 26 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"announce-output"
0 0 26 3 1 #" "
0 0 14 3 6 #"string"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 26 3 3 #") ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 6 #"string"
0 0 26 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 10 #"user-print"
0 0 26 3 1 #" "
0 0 14 3 6 #"object"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 19 #"compound-procedure?"
0 0 26 3 1 #" "
0 0 14 3 6 #"object"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 18 #"compound-procedure"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 20 #"procedure-parameters"
0 0 26 3 1 #" "
0 0 14 3 6 #"object"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 14 #"procedure-body"
0 0 26 3 1 #" "
0 0 14 3 6 #"object"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"             "
0 0 23 3 1 #"'"
0 0 14 3 15 #"<procedure-env>"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 6 #"object"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 22 #"the-global-environment"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 17 #"setup-environment"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 21 #"add-binding-to-frame!"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #" ("
0 0 14 3 11 #"first-frame"
0 0 26 3 1 #" "
0 0 14 3 22 #"the-global-environment"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 18 3 11 #"; 4.16 pt 2"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"internal"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 23 3 1 #"'"
0 0 26 3 2 #"(("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 4 #"true"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"odd?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"odd?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 5 #"false"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"even?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"  ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 9         589 23           0 0           0 97 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"int-test"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 4 #"true"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"odd?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"odd?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 5 #"false"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 5 #"even?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0           0 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 23 #";(lambda-body internal)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 17 #"get-internal-defs"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 2 #")("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #")("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 16 3 6 #"define"
0 0 26 3 4 #"))) "
0 0 14 3 4 #"body"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"the-actual-body"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 26 3 2 #")("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 16 3 6 #"define"
0 0 26 3 4 #"))) "
0 0 14 3 4 #"body"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 17 #"get-internal-defs"
0 0 26 3 1 #" "
0 0 14 3 8 #"internal"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"is-var?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"procname-or-var"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 7 #"is-var?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"make-let-init"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"df"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"procname-or-var"
0 0 26 3 1 #" "
0 0 14 3 2 #"df"
0 0 26 3 2 #") "
0 0 23 3 2 #"''"
0 0 14 3 12 #"*unassigned*"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"let-inits"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 8 #"internal"
0 0 26 3 3 #") ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 13 #"make-let-init"
0 0 26 3 2 #" ("
0 0 14 3 17 #"get-internal-defs"
0 0 26 3 1 #" "
0 0 14 3 8 #"internal"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"make-binding"
0 0 26 3 1 #" "
0 0 14 3 2 #"df"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 7 #"is-var?"
0 0 26 3 1 #" "
0 0 14 3 2 #"df"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 2 #"df"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 11 #"make-lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"cdadr"
0 0 26 3 1 #" "
0 0 14 3 2 #"df"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 2 #"df"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"make-let-setval"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"df"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 26 3 2 #" ("
0 0 14 3 15 #"procname-or-var"
0 0 26 3 1 #" "
0 0 14 3 2 #"df"
0 0 26 3 3 #") ("
0 0 14 3 12 #"make-binding"
0 0 26 3 1 #" "
0 0 14 3 2 #"df"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"let-setvals"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 8 #"internal"
0 0 26 3 3 #") ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 15 #"make-let-setval"
0 0 26 3 2 #" ("
0 0 14 3 17 #"get-internal-defs"
0 0 26 3 1 #" "
0 0 14 3 8 #"internal"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 18 #"body-contains-defs"
0 0 26 3 1 #" "
0 0 16 3 3 #"def"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 16 3 3 #"def"
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 16 3 3 #"def"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 26 3 1 #" "
0 0 16 3 3 #"def"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 16 3 6 #"define"
0 0 26 3 3 #")) "
0 0 23 3 2 #"#t"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 18 #"body-contains-defs"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 16 3 3 #"def"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 18 3 33 #";(displayln \"body-contains-defs\")"
0 0 26 29 1 #"\n"
0 0 18 3 30 #";(body-contains-defs internal)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 8 #"scan-out"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 18 #"body-contains-defs"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"thebody"
0 0 26 3 3 #") ("
0 0 14 3 6 #"append"
0 0 26 3 33 #"                                 "
0 0 26 29 1 #"\n"
0 0 26 3 35 #"                                  ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 9 #"let-inits"
0 0 26 3 1 #" "
0 0 14 3 7 #"thebody"
0 0 26 3 3 #") ("
0 0 14 3 11 #"let-setvals"
0 0 26 3 1 #" "
0 0 14 3 7 #"thebody"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 15 #"the-actual-body"
0 0 26 3 1 #" "
0 0 14 3 7 #"thebody"
0 0 26 3 5 #")))) "
0 0 14 3 4 #"body"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 14 3 4 #"body"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 18 3 22 #";(displayln \"scanout\")"
0 0 26 29 1 #"\n"
0 0 18 3 20 #";(scan-out internal)"
0 0 26 29 1 #"\n"
0 0 18 3 20 #";(scan-out '(* x x))"
0 0 26 29 1 #"\n"
0 9         247 23           0 0           0 40 0 26 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 26 3 1 #" "
0 0 14 3 10 #"\342\237\250vars\342\237\251"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 1 #"u"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 12 #"*unassigned*"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 12 #"*unassigned*"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"u"
0 0 26 3 1 #" "
0 0 14 3 8 #"\342\237\250e1\342\237\251"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 8 #"\342\237\250e2\342\237\251"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 14 3 8 #"\342\237\250e3\342\237\251"
0 0 26 3 2 #"))"
0           0 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"letrec?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #") ("
0 0 14 3 12 #"tagged-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 6 #"letrec"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"letrec-bindings"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #")("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"letrec-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #")("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"binding-var"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 12 #"binding-body"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 15 #"make-letrec-its"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 11 #"binding-var"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 2 #") "
0 0 23 3 2 #"''"
0 0 14 3 12 #"*unassigned*"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 19 #"make-letrec-rebinds"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"set!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"binding-var"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 3 #") ("
0 0 14 3 12 #"binding-body"
0 0 26 3 1 #" "
0 0 14 3 7 #"binding"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"letrec->let"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 12 #"letrec-inits"
0 0 26 3 2 #" ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 15 #"make-letrec-its"
0 0 26 3 2 #" ("
0 0 14 3 15 #"letrec-bindings"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 14 #"letrec-rebinds"
0 0 26 3 2 #" ("
0 0 14 3 3 #"map"
0 0 26 3 1 #" "
0 0 14 3 19 #"make-letrec-rebinds"
0 0 26 3 2 #" ("
0 0 14 3 15 #"letrec-bindings"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 12 #"letrec-inits"
0 0 26 3 3 #") ("
0 0 14 3 6 #"append"
0 0 26 3 1 #" "
0 0 14 3 14 #"letrec-rebinds"
0 0 26 3 2 #" ("
0 0 14 3 11 #"letrec-body"
0 0 26 3 1 #" "
0 0 14 3 3 #"exp"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"letrec1"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 16 3 6 #"letrec"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"even?"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 4 #"true"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 4 #"odd?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"odd?"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 5 #"false"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 5 #"even?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 11 #"letrec->let"
0 0 26 3 1 #" "
0 0 14 3 7 #"letrec1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 9        2365 23           0 0           0 393 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 16 3 6 #"letrec"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"even?"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 4 #"true"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 4 #"odd?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"odd?"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 5 #"false"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 5 #"even?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 18 3 23 #";e0 lambda vars-in-body"
0 0 26 29 1 #"\n"
0 0 18 3 17 #";eval letrec->let"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";eval let->(lambda *unassigned *unassigned)"
0 0 26 29 1 #"\n"
0 0 18 3 11 #";creates e1"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";even? *unassigned*"
0 0 26 29 1 #"\n"
0 0 18 3 17 #";odd? *unassigned"
0 0 26 29 1 #"\n"
0 0 18 3 28 #";set even and odd to lambdas"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";eval f body"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 7 #";if let"
0 0 26 29 1 #"\n"
0 0 18 3 23 #";e0 lambda vars-in-body"
0 0 26 29 1 #"\n"
0 0 18 3 9 #";eval let"
0 0 26 29 1 #"\n"
0 0 18 3 28 #";eval let-> (lambda (l1 l2))"
0 0 26 29 1 #"\n"
0 0 18 3 35 #";eval of lambdas would create procs"
0 0 26 29 1 #"\n"
0 0 18 3 45 #"; that don't have odd? or even? in their envs"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"letrec"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"even?"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 4 #"true"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 4 #"odd?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"odd?"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 5 #"false"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 5 #"even?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #")("
0 0 16 3 6 #"letrec"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    (("
0 0 14 3 4 #"fact"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"            "
0 0 23 3 1 #"1"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #" ("
0 0 14 3 4 #"fact"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 4 #"fact"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"(("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"   (("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"fib"
0 0 26 3 3 #") ("
0 0 14 3 3 #"fib"
0 0 26 3 1 #" "
0 0 14 3 3 #"fib"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"ft"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 23 3 1 #"1"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 2 #" ("
0 0 14 3 2 #"ft"
0 0 26 3 1 #" "
0 0 14 3 2 #"ft"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 23 3 2 #"10"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"(("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"   (("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"fib"
0 0 26 3 3 #") ("
0 0 14 3 3 #"fib"
0 0 26 3 1 #" "
0 0 14 3 3 #"fib"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"fb"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          (("
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 3 #") ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          (("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          (("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 2 #"fb"
0 0 26 3 1 #" "
0 0 14 3 2 #"fb"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #"))("
0 0 14 3 2 #"fb"
0 0 26 3 1 #" "
0 0 14 3 2 #"fb"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 8 #"))))))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 23 3 1 #"8"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0           0 0 0 26 29 1 #"\n"
0 0 18 3 5 #";4.21"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 1 #"f"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"  (("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 14 3 4 #"odd?"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 14 3 5 #"even?"
0 0 26 3 1 #" "
0 0 14 3 4 #"odd?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"ev?"
0 0 26 3 1 #" "
0 0 14 3 3 #"od?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 9 #"         "
0 0 14 3 4 #"true"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 3 #"od?"
0 0 26 3 1 #" "
0 0 14 3 3 #"ev?"
0 0 26 3 1 #" "
0 0 14 3 3 #"od?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"ev?"
0 0 26 3 1 #" "
0 0 14 3 3 #"od?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 9 #"         "
0 0 14 3 5 #"false"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 3 #"ev?"
0 0 26 3 1 #" "
0 0 14 3 3 #"ev?"
0 0 26 3 1 #" "
0 0 14 3 3 #"od?"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 11 #"driver-loop"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 9        2419 23           0 0           0 402 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"conda"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 5 #"assoc"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"a"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"(("
0 0 14 3 1 #"a"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #")("
0 0 14 3 1 #"b"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 4 #"))) "
0 0 14 3 2 #"=>"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"woop\""
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 5 #"condb"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"Three"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"Wrong"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 3 #"for"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #")("
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 2 #"10"
0 0 26 3 2 #")("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 3 #"for"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 2 #"10"
0 0 26 3 2 #")("
0 0 14 3 1 #">"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #")("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 5 #"begin"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"for"
0 0 26 3 2 #" ("
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #")("
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 2 #"10"
0 0 26 3 2 #")("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 5 #"begin"
0 0 26 3 2 #" ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 20 3 3 #"\" \""
0 0 26 3 2 #")("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"let1"
0 0 26 3 2 #" ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 4 #")))("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"let2"
0 0 26 3 2 #" ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"let3"
0 0 26 3 2 #" ("
0 0 16 3 4 #"let*"
0 0 26 3 3 #" (("
0 0 14 3 1 #"w"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 3 #"fib"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 8 #"fib-iter"
0 0 26 3 3 #" (("
0 0 14 3 1 #"a"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 1 #"b"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 3 #") ("
0 0 14 3 5 #"count"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 5 #"count"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 1 #"b"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 8 #"fib-iter"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 1 #" "
0 0 14 3 1 #"b"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                  "
0 0 14 3 1 #"a"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 5 #"count"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 2 #" ("
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 2 #"go"
0 0 26 3 3 #" (("
0 0 14 3 2 #"xs"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 23 3 1 #"1"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 2 #"xs"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 5 #"begin"
0 0 26 3 2 #" ("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 2 #"xs"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"go"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 2 #"xs"
0 0 26 3 6 #"))))))"
0           0 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0           0
