#lang sicp

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (print)
      (begin
        (display front-ptr)
        (newline)))
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (if (empty?) (error "front-queue on empty queue")
          (car front-ptr)))
    (define (delete)
      (cond ((empty?) (error "delete-queue on empty queue"))
          (else (set! front-ptr (cdr front-ptr))
                (print))))
    (define (insert item)
      (let ((new-pair (cons item '())))
        (cond ((empty?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else (set-cdr! rear-ptr new-pair)
                    (set! rear-ptr new-pair)
                    (print)))))            
    (define (dispatch m)
      (cond ((eq? m 'print) (print))
            ((eq? m 'empty?) (empty?))
            ((eq? m 'insert) insert)
            ((eq? m 'front) (front))
            ((eq? m 'delete) (delete))
            (else (error "make-queue: undefined operation" m))))
    dispatch))

(define (print-queue q) (q 'print))
(define (empty-queue? q) (q 'empty?))
(define (insert-queue q i) ((q 'insert) i))
(define (front-queue q) (q 'front))
(define (delete-queue q) (q 'delete))

(define q1 (make-queue))
(print-queue q1)
(empty-queue? q1)
(insert-queue q1 'a)
(front-queue q1)
(empty-queue? q1)
(insert-queue q1 'b)
(insert-queue q1 'c)
(front-queue q1)
(print-queue q1)
(delete-queue q1)
(front-queue q1)
(print-queue q1)
(delete-queue q1)
(front-queue q1)
(print-queue q1)
(delete-queue q1)
(empty-queue? q1)